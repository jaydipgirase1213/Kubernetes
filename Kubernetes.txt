List all the control plane components and write them to a file
--> cd /etc/kubernetes/manifests
      ls
&
    kubectl get componentstatuses

Create a replicaset which has 3 replicas
--> vim replicaset.yaml
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: my-replicaset
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: nginx
        image: nginx:latest
kubectl apply -f replicaset.yaml

Edit an existing pod and add a command
--> kubectl edit pod mypod
spec:
  containers:
  - name: mycontainer
    image: myimage
    command: ["sh", "-c", "echo Hello Kubernetes"]

Replace a pod with an existing yaml file and verify after
-->  kubectl replace -f pod.yaml
       kubectl get pods -o wide

Delete all the pods with a specific label
--> kubectl delete pods -l app=myapp

Create a pod and set "NET_ADMIN"
--> vim net.admin
apiVersion: v1
kind: Pod
metadata:
  name: net-admin-pod
spec:
  containers:
  - name: mycontainer
    image: myimage
    securityContext:
      capabilities:
        add: ["NET_ADMIN"]
kubectl apply -f net-admin.yaml

Get a list of all the pods which were recently deleted
-->  kubectl get events 
       kubectl get events --sort-by='.metadata.creationTimestamp' | grep "Deleted pod"

Delete a pod without any delay
--> kubectl delete pod net-admin-pod --grace-period=0 --force


Find the static pod path
-->  cd /etc/kubernetes/manifests

Create a clusterrole, service account and rolebinding
-->  vim clusterrole.yaml
       vim serviceaccount.yaml
       vim rolebinding.yaml
    
     kubectl apply -f clusterrole.yaml
     kubectl apply -f serviceaccount.yaml  
     kubectl apply -f rolebinding.yaml

Create two pods with different labels
--> vim pod1.yaml 
      vim pod2.yaml 

     kubectl apply -f pod1.yaml
     kubectl apply -f pod2.yaml



